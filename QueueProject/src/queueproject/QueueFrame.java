/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package queueproject;

import java.math.BigDecimal;
import java.math.RoundingMode;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;


/**
 *
 * @author mazen
 */
public class QueueFrame extends javax.swing.JFrame {

    /**
     * Creates new form QueueFrame
     */
    public QueueFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        queue_Switch = new javax.swing.JTabbedPane();
        panel_DD1K = new javax.swing.JPanel();
        lbl_arrival = new javax.swing.JLabel();
        txt_arrival = new javax.swing.JTextField();
        lbl_service = new javax.swing.JLabel();
        txt_service = new javax.swing.JTextField();
        lbl_time = new javax.swing.JLabel();
        txt_time = new javax.swing.JTextField();
        lbl_capacity = new javax.swing.JLabel();
        txt_capacity = new javax.swing.JTextField();
        btn_calculate = new javax.swing.JButton();
        btn_graph = new javax.swing.JButton();
        lbl_pplAtTime = new javax.swing.JLabel();
        txt_pplAtTime = new javax.swing.JTextField();
        lbl_qWaitTime = new javax.swing.JLabel();
        txt_qWaitTime = new javax.swing.JTextField();
        lbl_initialCustomers = new javax.swing.JLabel();
        txt_initialCustomers = new javax.swing.JTextField();
        lbl_customerNumber = new javax.swing.JLabel();
        txt_customerNumber = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbl_qWaitTime_M = new javax.swing.JLabel();
        txt_qWaitTime_M = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_balkTime = new javax.swing.JTextField();
        panel_MM1 = new javax.swing.JPanel();
        lbl_mm1_arrival = new javax.swing.JLabel();
        txt_mm1_arrival = new javax.swing.JTextField();
        lbl_mm1_service = new javax.swing.JLabel();
        txt_mm1_service = new javax.swing.JTextField();
        btn_mm1_calculate = new javax.swing.JButton();
        lbl_mm1_L = new javax.swing.JLabel();
        txt_mm1_L = new javax.swing.JTextField();
        lbl_mm1_Lq = new javax.swing.JLabel();
        txt_mm1_Lq = new javax.swing.JTextField();
        lbl_mm1_W = new javax.swing.JLabel();
        txt_mm1_W = new javax.swing.JTextField();
        lbl_mm1_Wq = new javax.swing.JLabel();
        txt_mm1_Wq = new javax.swing.JTextField();
        panel_MM1K = new javax.swing.JPanel();
        lbl_mm1k_arrival = new javax.swing.JLabel();
        txt_mm1k_arrival = new javax.swing.JTextField();
        lbl_mm1k_service = new javax.swing.JLabel();
        txt_mm1k_service = new javax.swing.JTextField();
        lbl_mm1k_capacity = new javax.swing.JLabel();
        txt_mm1k_capacity = new javax.swing.JTextField();
        btn_mm1k_calculate = new javax.swing.JButton();
        lbl_mm1k_L = new javax.swing.JLabel();
        txt_mm1k_L = new javax.swing.JTextField();
        lbl_mm1k_Lq = new javax.swing.JLabel();
        txt_mm1k_Lq = new javax.swing.JTextField();
        lbl_mm1k_W = new javax.swing.JLabel();
        txt_mm1k_W = new javax.swing.JTextField();
        Wq = new javax.swing.JLabel();
        txt_mm1k_Wq = new javax.swing.JTextField();
        panel_MMC = new javax.swing.JPanel();
        lbl_mmc_arrival = new javax.swing.JLabel();
        txt_mmc_arrival = new javax.swing.JTextField();
        lbl_mmc_service = new javax.swing.JLabel();
        txt_mmc_service = new javax.swing.JTextField();
        btn_mmc_calculate = new javax.swing.JButton();
        lbl_mmc_L = new javax.swing.JLabel();
        lbl_mmc_Lq = new javax.swing.JLabel();
        lbl_mmc_W = new javax.swing.JLabel();
        lbl_mmc_Wq = new javax.swing.JLabel();
        txt_mmc_L = new javax.swing.JTextField();
        txt_mmc_Lq = new javax.swing.JTextField();
        txt_mmc_W = new javax.swing.JTextField();
        txt_mmc_Wq = new javax.swing.JTextField();
        lbl_mmc_servers = new javax.swing.JLabel();
        txt_mmc_servers = new javax.swing.JTextField();
        panel_MMCK = new javax.swing.JPanel();
        lbl_mmck_arrival = new javax.swing.JLabel();
        lbl_mmck_service = new javax.swing.JLabel();
        lbl_mmck_servers = new javax.swing.JLabel();
        lbl_mmck_capacity = new javax.swing.JLabel();
        txt_mmck_arrival = new javax.swing.JTextField();
        txt_mmck_service = new javax.swing.JTextField();
        txt_mmck_servers = new javax.swing.JTextField();
        txt_mmck_capacity = new javax.swing.JTextField();
        btn_mmck_calculate = new javax.swing.JButton();
        lbl_mmck_L = new javax.swing.JLabel();
        lbl_mmck_Lq = new javax.swing.JLabel();
        lbl_mmck_W = new javax.swing.JLabel();
        lbl_mmck_Wq = new javax.swing.JLabel();
        txt_mmck_L = new javax.swing.JTextField();
        txt_mmck_Lq = new javax.swing.JTextField();
        txt_mmck_W = new javax.swing.JTextField();
        txt_mmck_Wq = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        lbl_arrival.setText("Arrival Time:");

        txt_arrival.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_arrivalKeyReleased(evt);
            }
        });

        lbl_service.setText("Service Time:");

        txt_service.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_serviceKeyReleased(evt);
            }
        });

        lbl_time.setText("Time:");

        txt_time.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_timeKeyReleased(evt);
            }
        });

        lbl_capacity.setText("Capacity:");

        txt_capacity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_capacityKeyReleased(evt);
            }
        });

        btn_calculate.setText("Calculate");
        btn_calculate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_calculateMouseClicked(evt);
            }
        });

        btn_graph.setText("Graph");
        btn_graph.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_graphMouseClicked(evt);
            }
        });

        lbl_pplAtTime.setText("n(t) =");

        txt_pplAtTime.setFocusable(false);

        lbl_qWaitTime.setText("Wq(n) =");

        txt_qWaitTime.setFocusable(false);

        lbl_initialCustomers.setText("Initial customers:");

        txt_initialCustomers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_initialCustomersKeyReleased(evt);
            }
        });

        lbl_customerNumber.setText("Customer Number:");

        txt_customerNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_customerNumberKeyReleased(evt);
            }
        });

        jLabel1.setText("0 for infinite capacity");

        jLabel2.setText("0 if none");

        lbl_qWaitTime_M.setText("Wq(M)=");

        jLabel3.setText("ti =");

        javax.swing.GroupLayout panel_DD1KLayout = new javax.swing.GroupLayout(panel_DD1K);
        panel_DD1K.setLayout(panel_DD1KLayout);
        panel_DD1KLayout.setHorizontalGroup(
            panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_DD1KLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_DD1KLayout.createSequentialGroup()
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_DD1KLayout.createSequentialGroup()
                                .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_arrival)
                                    .addComponent(lbl_service))
                                .addGap(35, 35, 35)
                                .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txt_service, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_arrival, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_DD1KLayout.createSequentialGroup()
                                .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_capacity)
                                    .addComponent(lbl_time))
                                .addGap(59, 59, 59)
                                .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_time, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_capacity, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panel_DD1KLayout.createSequentialGroup()
                                .addGap(296, 296, 296)
                                .addComponent(lbl_pplAtTime))
                            .addGroup(panel_DD1KLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1))
                            .addGroup(panel_DD1KLayout.createSequentialGroup()
                                .addGap(115, 115, 115)
                                .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_DD1KLayout.createSequentialGroup()
                                        .addComponent(btn_graph, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(lbl_qWaitTime_M, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lbl_qWaitTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))))
                    .addGroup(panel_DD1KLayout.createSequentialGroup()
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_initialCustomers)
                            .addComponent(lbl_customerNumber))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_initialCustomers, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                            .addComponent(txt_customerNumber))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_pplAtTime, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(txt_qWaitTime, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(txt_qWaitTime_M)
                    .addComponent(txt_balkTime))
                .addContainerGap(161, Short.MAX_VALUE))
        );
        panel_DD1KLayout.setVerticalGroup(
            panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_DD1KLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_DD1KLayout.createSequentialGroup()
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_arrival)
                            .addComponent(txt_arrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_service)
                            .addComponent(txt_service, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_time)
                            .addComponent(txt_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_capacity)
                            .addComponent(txt_capacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(panel_DD1KLayout.createSequentialGroup()
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panel_DD1KLayout.createSequentialGroup()
                                .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_pplAtTime)
                                    .addComponent(txt_pplAtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(51, 51, 51)
                                .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbl_qWaitTime_M)
                                    .addComponent(txt_qWaitTime_M, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(51, 51, 51))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_DD1KLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(btn_calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(btn_graph, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_qWaitTime)
                            .addComponent(txt_qWaitTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)))
                .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_DD1KLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_initialCustomers)
                            .addComponent(txt_initialCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(36, 36, 36)
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_customerNumber)
                            .addComponent(txt_customerNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel_DD1KLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(panel_DD1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txt_balkTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        queue_Switch.addTab("D/D/1/K-1", panel_DD1K);

        lbl_mm1_arrival.setText("Mean arrival rate:");

        txt_mm1_arrival.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1_arrivalKeyReleased(evt);
            }
        });

        lbl_mm1_service.setText("Mean service rate");

        txt_mm1_service.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1_serviceKeyReleased(evt);
            }
        });

        btn_mm1_calculate.setText("Calculate");
        btn_mm1_calculate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_mm1_calculateMouseClicked(evt);
            }
        });
        btn_mm1_calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mm1_calculateActionPerformed(evt);
            }
        });

        lbl_mm1_L.setText("Number of people in the system (L):");

        txt_mm1_L.setFocusable(false);
        txt_mm1_L.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_mm1_LActionPerformed(evt);
            }
        });
        txt_mm1_L.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1_LKeyReleased(evt);
            }
        });

        lbl_mm1_Lq.setText("Number of people in the queue (Lq):");

        txt_mm1_Lq.setFocusable(false);
        txt_mm1_Lq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1_LqKeyReleased(evt);
            }
        });

        lbl_mm1_W.setText("Expected wait time in the system (W):");

        txt_mm1_W.setFocusable(false);
        txt_mm1_W.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1_WKeyReleased(evt);
            }
        });

        lbl_mm1_Wq.setText("Expected wait time in the queue (Wq):");

        txt_mm1_Wq.setFocusable(false);
        txt_mm1_Wq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1_WqKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout panel_MM1Layout = new javax.swing.GroupLayout(panel_MM1);
        panel_MM1.setLayout(panel_MM1Layout);
        panel_MM1Layout.setHorizontalGroup(
            panel_MM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_MM1Layout.createSequentialGroup()
                .addGroup(panel_MM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_MM1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(panel_MM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbl_mm1_service)
                            .addComponent(lbl_mm1_arrival))
                        .addGap(18, 18, 18)
                        .addGroup(panel_MM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_mm1_arrival, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addComponent(txt_mm1_service)))
                    .addGroup(panel_MM1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(btn_mm1_calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(98, 98, 98)
                .addGroup(panel_MM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_mm1_Lq)
                    .addComponent(lbl_mm1_L)
                    .addComponent(lbl_mm1_W)
                    .addComponent(lbl_mm1_Wq))
                .addGap(41, 41, 41)
                .addGroup(panel_MM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_mm1_L, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_mm1_W, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_mm1_Lq, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_mm1_Wq, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_MM1Layout.setVerticalGroup(
            panel_MM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_MM1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(panel_MM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mm1_arrival)
                    .addComponent(txt_mm1_arrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_mm1_L)
                    .addComponent(txt_mm1_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(panel_MM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mm1_service)
                    .addComponent(txt_mm1_service, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_mm1_Lq)
                    .addComponent(txt_mm1_Lq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(panel_MM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_MM1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(btn_mm1_calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_MM1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(panel_MM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_mm1_W)
                            .addComponent(txt_mm1_W, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(2, 2, 2)
                .addGroup(panel_MM1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mm1_Wq)
                    .addComponent(txt_mm1_Wq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(205, Short.MAX_VALUE))
        );

        queue_Switch.addTab("M/M/1", panel_MM1);

        lbl_mm1k_arrival.setText("Mean arrival rate:");

        txt_mm1k_arrival.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1k_arrivalKeyReleased(evt);
            }
        });

        lbl_mm1k_service.setText("Mean service rate:");

        txt_mm1k_service.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1k_serviceKeyReleased(evt);
            }
        });

        lbl_mm1k_capacity.setText("Capacity:");

        txt_mm1k_capacity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1k_capacityKeyReleased(evt);
            }
        });

        btn_mm1k_calculate.setText("Calculate");
        btn_mm1k_calculate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_mm1k_calculateMouseClicked(evt);
            }
        });

        lbl_mm1k_L.setText("Number of people in the system (L):");

        txt_mm1k_L.setFocusable(false);
        txt_mm1k_L.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_mm1k_LActionPerformed(evt);
            }
        });
        txt_mm1k_L.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1k_LKeyReleased(evt);
            }
        });

        lbl_mm1k_Lq.setText("Number of people in the queue (Lq):");

        txt_mm1k_Lq.setFocusable(false);
        txt_mm1k_Lq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_mm1k_LqActionPerformed(evt);
            }
        });
        txt_mm1k_Lq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1k_LqKeyReleased(evt);
            }
        });

        lbl_mm1k_W.setText("Expected wait time in the system (W):");

        txt_mm1k_W.setFocusable(false);
        txt_mm1k_W.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1k_WKeyReleased(evt);
            }
        });

        Wq.setText("Expected wait time in the queue (Wq):");

        txt_mm1k_Wq.setFocusable(false);
        txt_mm1k_Wq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mm1k_WqKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout panel_MM1KLayout = new javax.swing.GroupLayout(panel_MM1K);
        panel_MM1K.setLayout(panel_MM1KLayout);
        panel_MM1KLayout.setHorizontalGroup(
            panel_MM1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_MM1KLayout.createSequentialGroup()
                .addGroup(panel_MM1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_MM1KLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(panel_MM1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbl_mm1k_service, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_mm1k_capacity, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_mm1k_arrival, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(panel_MM1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_mm1k_arrival)
                            .addComponent(txt_mm1k_service)
                            .addComponent(txt_mm1k_capacity, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))
                    .addGroup(panel_MM1KLayout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(btn_mm1k_calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(110, 110, 110)
                .addGroup(panel_MM1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_mm1k_L)
                    .addComponent(lbl_mm1k_Lq)
                    .addComponent(lbl_mm1k_W)
                    .addComponent(Wq))
                .addGap(22, 22, 22)
                .addGroup(panel_MM1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txt_mm1k_W, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                    .addComponent(txt_mm1k_Lq, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_mm1k_L)
                    .addComponent(txt_mm1k_Wq))
                .addGap(65, 65, 65))
        );
        panel_MM1KLayout.setVerticalGroup(
            panel_MM1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_MM1KLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(panel_MM1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mm1k_arrival)
                    .addComponent(txt_mm1k_arrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_mm1k_L)
                    .addComponent(txt_mm1k_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(panel_MM1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mm1k_service)
                    .addComponent(txt_mm1k_service, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_mm1k_Lq)
                    .addComponent(txt_mm1k_Lq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(panel_MM1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mm1k_capacity)
                    .addComponent(txt_mm1k_capacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_mm1k_W)
                    .addComponent(txt_mm1k_W, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(panel_MM1KLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_mm1k_calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Wq)
                    .addComponent(txt_mm1k_Wq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(163, Short.MAX_VALUE))
        );

        queue_Switch.addTab("M/M/1/K", panel_MM1K);

        lbl_mmc_arrival.setText("Mean arrival rate:");

        txt_mmc_arrival.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmc_arrivalKeyReleased(evt);
            }
        });

        lbl_mmc_service.setText("Mean service rate:");

        txt_mmc_service.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmc_serviceKeyReleased(evt);
            }
        });

        btn_mmc_calculate.setText("Calculate");
        btn_mmc_calculate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_mmc_calculateMouseClicked(evt);
            }
        });

        lbl_mmc_L.setText("Number of people in the system (L):");

        lbl_mmc_Lq.setText("Number of people in the queue (Lq):");

        lbl_mmc_W.setText("Expected wait time in the system (W):");

        lbl_mmc_Wq.setText("Expected wait time in the queue (Wq):");

        txt_mmc_L.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmc_LKeyReleased(evt);
            }
        });

        txt_mmc_Lq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmc_LqKeyReleased(evt);
            }
        });

        txt_mmc_W.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmc_WKeyReleased(evt);
            }
        });

        txt_mmc_Wq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmc_WqKeyReleased(evt);
            }
        });

        lbl_mmc_servers.setText("Servers:");

        javax.swing.GroupLayout panel_MMCLayout = new javax.swing.GroupLayout(panel_MMC);
        panel_MMC.setLayout(panel_MMCLayout);
        panel_MMCLayout.setHorizontalGroup(
            panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_MMCLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(panel_MMCLayout.createSequentialGroup()
                        .addGroup(panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_mmc_service)
                            .addComponent(lbl_mmc_arrival))
                        .addGap(18, 18, 18)
                        .addGroup(panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_mmc_arrival)
                            .addComponent(txt_mmc_service, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addGap(111, 111, 111)
                        .addGroup(panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_mmc_Lq)
                            .addComponent(lbl_mmc_L))
                        .addGap(7, 7, 7))
                    .addGroup(panel_MMCLayout.createSequentialGroup()
                        .addGroup(panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_MMCLayout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(btn_mmc_calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(panel_MMCLayout.createSequentialGroup()
                                .addComponent(lbl_mmc_servers)
                                .addGap(76, 76, 76)
                                .addComponent(txt_mmc_servers)
                                .addGap(109, 109, 109)))
                        .addGroup(panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_mmc_W)
                            .addComponent(lbl_mmc_Wq))))
                .addGap(25, 25, 25)
                .addGroup(panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_mmc_L)
                    .addComponent(txt_mmc_Lq)
                    .addComponent(txt_mmc_W)
                    .addComponent(txt_mmc_Wq, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        panel_MMCLayout.setVerticalGroup(
            panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_MMCLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mmc_arrival)
                    .addComponent(txt_mmc_arrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_mmc_L)
                    .addComponent(txt_mmc_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mmc_service)
                    .addComponent(txt_mmc_service, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_mmc_Lq)
                    .addComponent(txt_mmc_Lq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mmc_W)
                    .addComponent(txt_mmc_W, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_mmc_servers)
                    .addComponent(txt_mmc_servers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(panel_MMCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mmc_Wq)
                    .addComponent(txt_mmc_Wq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_mmc_calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(193, Short.MAX_VALUE))
        );

        queue_Switch.addTab("M/M/C", panel_MMC);

        lbl_mmck_arrival.setText("Mean arrival rate:");

        lbl_mmck_service.setText("Mean service rate:");

        lbl_mmck_servers.setText("Servers:");

        lbl_mmck_capacity.setText("Capacity:");

        txt_mmck_arrival.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmck_arrivalKeyReleased(evt);
            }
        });

        txt_mmck_service.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmck_serviceKeyReleased(evt);
            }
        });

        txt_mmck_servers.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmck_serversKeyReleased(evt);
            }
        });

        txt_mmck_capacity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmck_capacityKeyReleased(evt);
            }
        });

        btn_mmck_calculate.setText("Calculate");
        btn_mmck_calculate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_mmck_calculateMouseClicked(evt);
            }
        });

        lbl_mmck_L.setText("Number of people in the system (L):");

        lbl_mmck_Lq.setText("Number of people in the queue (Lq):");

        lbl_mmck_W.setText("Expected wait time in the system (W):");

        lbl_mmck_Wq.setText("Expected wait time in the queue (Wq):");

        txt_mmck_L.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmck_LKeyReleased(evt);
            }
        });

        txt_mmck_Lq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmck_LqKeyReleased(evt);
            }
        });

        txt_mmck_W.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmck_WKeyReleased(evt);
            }
        });

        txt_mmck_Wq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_mmck_WqKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout panel_MMCKLayout = new javax.swing.GroupLayout(panel_MMCK);
        panel_MMCK.setLayout(panel_MMCKLayout);
        panel_MMCKLayout.setHorizontalGroup(
            panel_MMCKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_MMCKLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(btn_mmck_calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(panel_MMCKLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(panel_MMCKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_mmck_arrival)
                    .addComponent(lbl_mmck_service)
                    .addComponent(lbl_mmck_servers)
                    .addComponent(lbl_mmck_capacity))
                .addGap(18, 18, 18)
                .addGroup(panel_MMCKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_mmck_capacity, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(txt_mmck_servers)
                    .addComponent(txt_mmck_service)
                    .addComponent(txt_mmck_arrival))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                .addGroup(panel_MMCKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_MMCKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lbl_mmck_W)
                        .addComponent(lbl_mmck_Lq)
                        .addComponent(lbl_mmck_L))
                    .addComponent(lbl_mmck_Wq, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_MMCKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_mmck_L)
                    .addComponent(txt_mmck_Lq)
                    .addComponent(txt_mmck_W)
                    .addComponent(txt_mmck_Wq, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addGap(83, 83, 83))
        );
        panel_MMCKLayout.setVerticalGroup(
            panel_MMCKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_MMCKLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(panel_MMCKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mmck_arrival)
                    .addComponent(txt_mmck_arrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_mmck_L)
                    .addComponent(txt_mmck_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(panel_MMCKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mmck_service)
                    .addComponent(txt_mmck_service, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_mmck_Lq)
                    .addComponent(txt_mmck_Lq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(panel_MMCKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mmck_servers)
                    .addComponent(txt_mmck_servers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_mmck_W)
                    .addComponent(txt_mmck_W, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(panel_MMCKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_mmck_capacity)
                    .addComponent(txt_mmck_capacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_mmck_Wq)
                    .addComponent(txt_mmck_Wq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66)
                .addComponent(btn_mmck_calculate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        queue_Switch.addTab("M/M/C/K", panel_MMCK);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(queue_Switch)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(queue_Switch, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//  LAMBDA > MU   >>>>> DONE    Arrival rate is "Lambda"    Arrival time is "1/Lambda"  
//  MU >= LAMBDA  >>>>> DONE     Service rate is "Mu"        Service time is "1/Mu"
    private void btn_calculateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_calculateMouseClicked
        try {
            ScriptEngineManager arithmetic = new ScriptEngineManager();
            ScriptEngine arithmetic_engine = arithmetic.getEngineByName("JavaScript");
            
            double arrival_time= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_arrival.getText())));
            double service_time= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_service.getText())));
            double arrival_rate= (double) 1/arrival_time;
            double service_rate= (double) 1/service_time;
            int time= Integer.valueOf(String.valueOf(arithmetic_engine.eval(txt_time.getText())));
            int pplAtTime=0;
            int qWaitTime;
            int first_balk_time=0;
            int capacity= Integer.valueOf(String.valueOf(arithmetic_engine.eval(txt_capacity.getText())));
            int M= Integer.valueOf(String.valueOf(arithmetic_engine.eval(txt_initialCustomers.getText())));
            int N= Integer.valueOf(String.valueOf(arithmetic_engine.eval(txt_customerNumber.getText())));
            int qWaitTime_M;
            double general_balk_time= (-(service_rate / arrival_rate) + capacity) / (arrival_rate - service_rate);
            boolean special_case=false;
            
            if(M > capacity){
            javax.swing.JOptionPane.showMessageDialog(rootPane, "Initial customers can't be greater than system capacity!", "WARNING!", HEIGHT);
            return;
            }
            
            // Case 1 LAMBDA > MU (System is unstable)
            if(arrival_time < service_time){
            if(arrival_time % service_time == 0){
            special_case=true;
            }
            general_balk_time=Math.round(general_balk_time);
            
            while(true){
                if( Math.floor(arrival_rate * general_balk_time) - 
                        Math.floor((BigDecimal.valueOf((service_rate * general_balk_time) - 
                                (service_rate / arrival_rate)).setScale(6, RoundingMode.HALF_UP)).doubleValue())  == capacity){
                    general_balk_time-=arrival_time;
                    continue;
                }
                else{
                    general_balk_time+=arrival_time;
                }
                break;
            }
            
            first_balk_time= (int) general_balk_time;
            txt_balkTime.setText("" + first_balk_time);
            
            if(special_case == true){
                if(time >= first_balk_time){
                    pplAtTime= capacity-1;
                    qWaitTime= (int) ((service_time -  arrival_time)*((arrival_rate * first_balk_time) - 2)) ;
                    txt_pplAtTime.setText("" + pplAtTime);
                    txt_qWaitTime.setText("" + qWaitTime);
                }
            }
            
            if(time < arrival_time){
                pplAtTime=0;
                txt_pplAtTime.setText("" + pplAtTime);
            }
            else if(time > arrival_time && time < first_balk_time){
                pplAtTime=  ( (int)(arrival_rate * time) - (int)(service_rate * time - service_rate / arrival_rate));
                txt_pplAtTime.setText("" + pplAtTime);
            }
            else if (time > first_balk_time){
                if ((time - (.5 * (arrival_time)) - first_balk_time) % (arrival_time) == 0) {
                    pplAtTime = capacity - 2;
                } else {
                    pplAtTime = capacity - 1;
                }
                txt_pplAtTime.setText("" + pplAtTime);
            }
            
            if(N == 0){
                qWaitTime=0;
                txt_qWaitTime.setText("" + qWaitTime);
            }
            else if(N > 0 && N < (arrival_rate * first_balk_time)){
                qWaitTime= (int)((service_time - arrival_time) * (time - 1));
                txt_qWaitTime.setText("" + qWaitTime);
            }
            else if(N >= (arrival_rate * first_balk_time)){
                double qwait_time_1= (service_time - arrival_time) * ((arrival_rate * first_balk_time) - 2);
                double qwait_time_2= (service_time - arrival_time) * ((arrival_rate * first_balk_time) - 3);
                txt_qWaitTime.setText(qwait_time_1 + " or " + qwait_time_2);
            }
            
            
            }
            
            // Case 2 LAMBDA < MU          (System is stable)
            else if(arrival_time >= service_time){
                
                general_balk_time= Math.floor(M / (service_rate - arrival_rate));
                
                while(true){
                if((Math.floor(service_rate * general_balk_time) - Math.floor(arrival_rate * general_balk_time)) == M){
                    general_balk_time-=arrival_time;
                    continue;
                }
                else{
                    general_balk_time+=arrival_time;
                }
                break;
            }
            
            first_balk_time= (int) general_balk_time;
            txt_balkTime.setText("" + first_balk_time);    
                
                if(M > 0){
                    if(arrival_time > service_time){
                       if(time < first_balk_time){
                        pplAtTime=(int) ( M + Math.floor(arrival_rate * time) - Math.floor(service_rate * time) );
                        txt_pplAtTime.setText("" + pplAtTime);
                       }
                       else if(time >= first_balk_time){
                        pplAtTime=0;
                        txt_pplAtTime.setText("" + pplAtTime + " or " + (pplAtTime+1));
                       }
                        qWaitTime_M= (int) ((M-1) / (2 * service_rate));
                        
                        txt_qWaitTime_M.setText("" + qWaitTime_M);
                        }
                }
                
                    else if(arrival_time == service_time){
                        pplAtTime=M;
                        qWaitTime= (int) ((M-1) * (service_time));
                        qWaitTime_M= qWaitTime;
                        txt_pplAtTime.setText("" + pplAtTime);
                        txt_qWaitTime_M.setText("" + qWaitTime_M);
                        txt_qWaitTime.setText("" + qWaitTime);
                    }
                        
                            if(N <= (arrival_rate * first_balk_time)){
                                qWaitTime=(int) ((M-1+N) * (service_rate) - N*(arrival_time));
                                txt_qWaitTime.setText("" + qWaitTime);
                                }
                           else if(N >= (arrival_rate * first_balk_time)){
                                qWaitTime=0;
                                txt_qWaitTime.setText("" + qWaitTime);
                           }
            
            }
            
            
            
            
        } catch (NumberFormatException | ScriptException ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, "Please enter valid input!", "WARNING!", HEIGHT);
        }
    }//GEN-LAST:event_btn_calculateMouseClicked

    private void txt_pplAtTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_pplAtTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_pplAtTimeActionPerformed

    private void txt_arrivalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_arrivalKeyTyped

    }//GEN-LAST:event_txt_arrivalKeyTyped

    private void txt_arrivalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_arrivalKeyReleased
        // TODO add your handling code here:
        String input= txt_arrival.getText();
        verify_input(input, txt_arrival);

    }//GEN-LAST:event_txt_arrivalKeyReleased

    private void txt_serviceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_serviceKeyReleased
        // TODO add your handling code here:
        String input= txt_service.getText();
        verify_input(input, txt_service);
    }//GEN-LAST:event_txt_serviceKeyReleased

    private void txt_timeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_timeKeyReleased
        // TODO add your handling code here:
        String input= txt_time.getText();
        verify_input(input, txt_time);
    }//GEN-LAST:event_txt_timeKeyReleased

    private void txt_capacityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_capacityKeyReleased
        // TODO add your handling code here:
        String input= txt_capacity.getText();
        verify_input(input, txt_capacity);
    }//GEN-LAST:event_txt_capacityKeyReleased

    private void txt_arrivalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_arrivalKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txt_arrivalKeyPressed

    private void btn_graphMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_graphMouseClicked
        XYSeriesCollection dataset= new XYSeriesCollection();
        XYSeries series= new XYSeries("People at time");
        
        try{
            ScriptEngineManager arithmetic = new ScriptEngineManager();
            ScriptEngine arithmetic_engine = arithmetic.getEngineByName("JavaScript");
            int capacity= Integer.valueOf(String.valueOf(arithmetic_engine.eval(txt_capacity.getText())));
            double arrival_time= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_arrival.getText())));
            double service_time= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_service.getText())));
            int M= Integer.valueOf(String.valueOf(arithmetic_engine.eval(txt_initialCustomers.getText())));
            
            
            // Case 1: (System is unstable)
            if(arrival_time < service_time){
            for(int i=0; i<=80; i++){
            if(getPPLCountAtTime(i) < capacity && getPPLCountAtTime(i) >= 0){
                series.add(i,getPPLCountAtTime(i));
        }
            else{
                int j=i; // j is the last time period that had a value n(t) < capacity
                while(getPPLCountAtTime(j) >= capacity || getPPLCountAtTime(j) < 0){    
                j=j-1;
                }
                series.add(i,getPPLCountAtTime(j));
            }
        }
            }
            
            // Case 2: (System is stable with initial customers M)
          else if(arrival_time > service_time){
                int i=0;
                if(M > 0){
                  series.add(0,M);
                  i=1;
                  }
                
              while(i <= 50){
                  
            if(getPPLCountAtTime(i) >= 0){
                series.add(i,getPPLCountAtTime(i));
        }
            else{
                int j=i; // j is the last time period that had a value n(t) > 0
                while(getPPLCountAtTime(j) < 0){    
                j=j-1;
                }
                series.add(i,getPPLCountAtTime(j));
            }
            i++;
        }
            }
            
       }
       catch (NumberFormatException | ScriptException ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, "Please enter valid input!", "WARNING!", HEIGHT);
        }
        dataset.addSeries(series);
        
       JFreeChart chart= ChartFactory.createXYStepChart("Time diagram", "Time", "Customer count", dataset);
       
       XYPlot plot=chart.getXYPlot();
       plot.setDomainGridlinesVisible(true);
       plot.setRangeGridlinesVisible(true);
       
       NumberAxis x_axis= new NumberAxis();
       x_axis.setTickUnit(new NumberTickUnit(1));
       plot.setDomainAxis(x_axis);
       
       plot.getDomainAxis().setAutoRange(true);
       
       plot.getRangeAxis().setRange(0,10);
      
       
       ChartFrame plt_frame= new ChartFrame("XY Step",chart);
       plt_frame.setVisible(true);
       plt_frame.setSize(750, 500);
    }//GEN-LAST:event_btn_graphMouseClicked

    private void btn_mm1_calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mm1_calculateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_mm1_calculateActionPerformed

    private void btn_mm1_calculateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_mm1_calculateMouseClicked
        ScriptEngineManager arithmetic= new ScriptEngineManager();
        ScriptEngine arithmetic_engine= arithmetic.getEngineByName("JavaScript");
        try{
        double arrival_rate= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_mm1_arrival.getText())));
        double service_rate= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_mm1_service.getText())));
        double L,Lq,W,Wq;
        double rho= arrival_rate/service_rate;
        
        L= Math.rint((arrival_rate)/(service_rate-arrival_rate));
        Lq= Math.rint(Math.pow(arrival_rate,2)/(service_rate*(service_rate-arrival_rate)));
        W= Math.rint(1/(service_rate-arrival_rate));
        Wq= Math.rint(arrival_rate/((service_rate)*(service_rate-arrival_rate)));
        
        txt_mm1_L.setText("" + L);
        txt_mm1_Lq.setText("" + Lq);
        txt_mm1_W.setText("" + W);
        txt_mm1_Wq.setText("" + Wq);
        }
        catch (NumberFormatException | ScriptException ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, "Please enter valid input!", "WARNING!", HEIGHT);
        }
    }//GEN-LAST:event_btn_mm1_calculateMouseClicked

    private void txt_mm1_arrivalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1_arrivalKeyReleased
        String input= txt_mm1_arrival.getText();
        verify_input(input,txt_mm1_arrival);
    }//GEN-LAST:event_txt_mm1_arrivalKeyReleased

    private void txt_mm1_serviceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1_serviceKeyReleased
        String input= txt_mm1_service.getText();
        verify_input(input,txt_mm1_service);
    }//GEN-LAST:event_txt_mm1_serviceKeyReleased

    private void txt_mm1_LKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1_LKeyReleased
        String input= txt_mm1_L.getText();
        verify_input(input,txt_mm1_L);
    }//GEN-LAST:event_txt_mm1_LKeyReleased

    private void txt_mm1_LqKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1_LqKeyReleased
        String input= txt_mm1_Lq.getText();
        verify_input(input,txt_mm1_Lq);
    }//GEN-LAST:event_txt_mm1_LqKeyReleased

    private void txt_mm1_WKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1_WKeyReleased
        String input= txt_mm1_W.getText();
        verify_input(input,txt_mm1_W);
    }//GEN-LAST:event_txt_mm1_WKeyReleased

    private void txt_mm1_WqKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1_WqKeyReleased
       String input= txt_mm1_Wq.getText();
       verify_input(input,txt_mm1_Wq);
    }//GEN-LAST:event_txt_mm1_WqKeyReleased

    private void txt_mm1_LActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_mm1_LActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_mm1_LActionPerformed

    private void txt_mm1k_LqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_mm1k_LqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_mm1k_LqActionPerformed

    private void txt_mm1k_LActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_mm1k_LActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_mm1k_LActionPerformed

    private void txt_mm1k_arrivalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1k_arrivalKeyReleased
        String input= txt_mm1k_arrival.getText();
        verify_input(input,txt_mm1k_arrival);
    }//GEN-LAST:event_txt_mm1k_arrivalKeyReleased

    private void txt_mm1k_serviceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1k_serviceKeyReleased
        String input= txt_mm1k_service.getText();
        verify_input(input,txt_mm1k_service);
    }//GEN-LAST:event_txt_mm1k_serviceKeyReleased

    private void txt_mm1k_capacityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1k_capacityKeyReleased
        String input= txt_mm1k_capacity.getText();
        verify_input(input,txt_mm1k_capacity);
    }//GEN-LAST:event_txt_mm1k_capacityKeyReleased

    private void txt_mm1k_LKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1k_LKeyReleased
        String input= txt_mm1k_L.getText();
        verify_input(input,txt_mm1k_L);
    }//GEN-LAST:event_txt_mm1k_LKeyReleased

    private void txt_mm1k_LqKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1k_LqKeyReleased
        String input= txt_mm1k_Lq.getText();
        verify_input(input,txt_mm1k_Lq);
    }//GEN-LAST:event_txt_mm1k_LqKeyReleased

    private void txt_mm1k_WKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1k_WKeyReleased
        String input= txt_mm1k_W.getText();
        verify_input(input,txt_mm1k_W);
    }//GEN-LAST:event_txt_mm1k_WKeyReleased

    private void txt_mm1k_WqKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mm1k_WqKeyReleased
        String input= txt_mm1k_Wq.getText();
        verify_input(input,txt_mm1k_Wq);
    }//GEN-LAST:event_txt_mm1k_WqKeyReleased

    private void btn_mm1k_calculateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_mm1k_calculateMouseClicked
        try {
            ScriptEngineManager arithmetic= new ScriptEngineManager();
            ScriptEngine arithmetic_engine= arithmetic.getEngineByName("JavaScript");
            double arrival_rate= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_mm1k_arrival.getText())));
            double service_rate= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_mm1k_service.getText())));
            double capacity= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_mm1k_capacity.getText())));
            double L=0,Lq,W,Wq;
            double rho= arrival_rate/service_rate;
            double p0= (1-rho)/(1-Math.pow(rho,(capacity+1)));
            double pk=0;
            if (rho != 1){
                pk= Math.pow(rho, capacity)*p0;
                L=(rho*(  (1-(capacity+1)*Math.pow(rho,capacity)  +  (capacity * Math.pow(rho,(capacity+1))))  /
                        ((1-rho)*(1-Math.pow(rho,(capacity+1))))));
            }
                else if(rho == 1){
                    pk=(1/(capacity+1));
                    L= capacity/2;
             }
            
            W= L/(arrival_rate*(1-pk));
            Wq= W - (1/service_rate);
            Lq= arrival_rate*Wq*(1-pk);
            
            txt_mm1k_L.setText("" + BigDecimal.valueOf(L).setScale(3, RoundingMode.HALF_UP).doubleValue());
            txt_mm1k_Lq.setText("" + BigDecimal.valueOf(Lq).setScale(3, RoundingMode.HALF_UP).doubleValue());
            txt_mm1k_W.setText("" + BigDecimal.valueOf(W).setScale(3, RoundingMode.HALF_UP).doubleValue());
            txt_mm1k_Wq.setText("" + BigDecimal.valueOf(Wq).setScale(3, RoundingMode.HALF_UP).doubleValue());
            
        } catch (NumberFormatException | ScriptException ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, "Please enter valid input!", "WARNING!", HEIGHT);
        }
    }//GEN-LAST:event_btn_mm1k_calculateMouseClicked

    private void txt_mmc_arrivalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmc_arrivalKeyReleased
        String input= txt_mmc_arrival.getText();
        verify_input(input,txt_mmc_arrival);
    }//GEN-LAST:event_txt_mmc_arrivalKeyReleased

    private void txt_mmc_serviceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmc_serviceKeyReleased
        String input= txt_mmc_service.getText();
        verify_input(input,txt_mmc_service);
    }//GEN-LAST:event_txt_mmc_serviceKeyReleased

    private void txt_mmc_LKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmc_LKeyReleased
        String input= txt_mmc_L.getText();
        verify_input(input,txt_mmc_L);
    }//GEN-LAST:event_txt_mmc_LKeyReleased

    private void txt_mmc_LqKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmc_LqKeyReleased
        String input= txt_mmc_Lq.getText();
        verify_input(input,txt_mmc_Lq);
    }//GEN-LAST:event_txt_mmc_LqKeyReleased

    private void txt_mmc_WKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmc_WKeyReleased
        String input= txt_mmc_W.getText();
        verify_input(input,txt_mmc_W);
    }//GEN-LAST:event_txt_mmc_WKeyReleased

    private void txt_mmc_WqKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmc_WqKeyReleased
        String input= txt_mmc_Wq.getText();
        verify_input(input,txt_mmc_Wq);
    }//GEN-LAST:event_txt_mmc_WqKeyReleased

    private void btn_mmc_calculateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_mmc_calculateMouseClicked
        try {
            ScriptEngineManager arithmetic= new ScriptEngineManager();
            ScriptEngine arithmetic_engine= arithmetic.getEngineByName("JavaScript");
            double arrival_rate= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_mmc_arrival.getText())));
            double service_rate= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_mmc_service.getText())));
            int c= Integer.valueOf(String.valueOf(arithmetic_engine.eval(txt_mmc_servers.getText())));
            double r= arrival_rate/service_rate;
            double L,Lq,W,Wq;
            double rho= r/c;
            double summation=0,term_2nd=0,p0=0;

            if (rho >= 1){
                for (int n=0; n<=(c-1); n++){
                    summation= summation + (1/factorial(n)) * Math.pow(r, n);
            }
                term_2nd= (1/factorial(c)) * Math.pow(r, c) * 
                    ((c * service_rate) / ((c * service_rate) - arrival_rate) );
                p0= 1/(summation + term_2nd);
            }
            
            else if(rho < 1){
                for (int n=0; n<=(c-1); n++){
                    summation= summation + (Math.pow(r, n) / factorial(n));
            }
                term_2nd= ((c * Math.pow(r, c)) / (factorial(c) * (c - r)));
                p0= 1/(summation + term_2nd);
            }
            
            Lq= p0 * ( (Math.pow(r,(c+1)) / c ) / (factorial(c) * Math.pow((1-(r/c)), 2) ) );
            Wq= Lq / arrival_rate;
            W= Wq + (1/service_rate);
            L= Lq + r;
            
            txt_mmc_L.setText(""+ BigDecimal.valueOf(L).setScale(3, RoundingMode.HALF_UP).doubleValue());
            txt_mmc_Lq.setText("" + BigDecimal.valueOf(Lq).setScale(3, RoundingMode.HALF_UP).doubleValue());
            txt_mmc_W.setText("" + BigDecimal.valueOf(W).setScale(3, RoundingMode.HALF_UP).doubleValue());
            txt_mmc_Wq.setText("" + BigDecimal.valueOf(Wq).setScale(3, RoundingMode.HALF_UP).doubleValue());
            
        } catch (NumberFormatException | ScriptException ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, "Please enter valid input!", "WARNING!", HEIGHT);
        }
    }//GEN-LAST:event_btn_mmc_calculateMouseClicked

    private void txt_mmck_arrivalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmck_arrivalKeyReleased
        String input= txt_mmck_arrival.getText();
        verify_input(input,txt_mmck_arrival);
    }//GEN-LAST:event_txt_mmck_arrivalKeyReleased

    private void txt_mmck_serviceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmck_serviceKeyReleased
        String input= txt_mmck_service.getText();
        verify_input(input,txt_mmck_service);
    }//GEN-LAST:event_txt_mmck_serviceKeyReleased

    private void txt_mmck_serversKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmck_serversKeyReleased
        String input= txt_mmck_servers.getText();
        verify_input(input,txt_mmck_servers);
    }//GEN-LAST:event_txt_mmck_serversKeyReleased

    private void txt_mmck_capacityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmck_capacityKeyReleased
        String input= txt_mmck_capacity.getText();
        verify_input(input,txt_mmck_capacity);
    }//GEN-LAST:event_txt_mmck_capacityKeyReleased

    private void txt_mmck_LKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmck_LKeyReleased
        String input= txt_mmck_L.getText();
        verify_input(input,txt_mmck_L);
    }//GEN-LAST:event_txt_mmck_LKeyReleased

    private void txt_mmck_LqKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmck_LqKeyReleased
        String input= txt_mmck_Lq.getText();
        verify_input(input,txt_mmck_Lq);
    }//GEN-LAST:event_txt_mmck_LqKeyReleased

    private void txt_mmck_WKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmck_WKeyReleased
        String input= txt_mmck_W.getText();
        verify_input(input,txt_mmck_W);
    }//GEN-LAST:event_txt_mmck_WKeyReleased

    private void txt_mmck_WqKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_mmck_WqKeyReleased
        String input= txt_mmck_Wq.getText();
        verify_input(input,txt_mmck_Wq);
    }//GEN-LAST:event_txt_mmck_WqKeyReleased

    private void btn_mmck_calculateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_mmck_calculateMouseClicked
        try {
            ScriptEngineManager arithmetic= new ScriptEngineManager();
            ScriptEngine arithmetic_engine= arithmetic.getEngineByName("JavaScript");
            double arrival_rate= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_mmck_arrival.getText())));
            double service_rate= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_mmck_service.getText())));
            int c= Integer.valueOf(String.valueOf(arithmetic_engine.eval(txt_mmck_servers.getText())));
            int k= Integer.valueOf(String.valueOf(arithmetic_engine.eval(txt_mmck_capacity.getText())));
            double r= arrival_rate/service_rate;
            double rho= r/c;
            double L,Lq,W,Wq;
            double p0=0,pk;
            double term_2nd,summation=0;
            
            if (rho != 1){
                for (int n=0; n<=(c-1); n++){
                    summation= summation + (Math.pow(r, n) / factorial(n));
            }
                term_2nd= ( (Math.pow(r, c) / factorial(c)) * ( (1-Math.pow(rho, (k-c+1))) / (1-rho) ));
                p0= 1/(summation + term_2nd);
            }
            
            else if(rho == 1){
                for (int n=0; n<=(c-1); n++){
                    summation= summation + (Math.pow(r, n) / factorial(n));
            }
                term_2nd= ( (Math.pow(r, c) / factorial(c)) * (k-c+1) );
                p0= 1/(summation + term_2nd);
            }
            
            Lq= ( (rho * Math.pow(r,c) * p0) / (factorial(c) * Math.pow(1-rho, 2)) *
                    ( 1-Math.pow(rho,(k-c+1)) - ( (1-rho) * (k-c+1) * Math.pow(rho, (k-c))) ) );
            
            summation=0;
            
            for (int n=0; n<=(c-1); n++){
                    summation= summation + ( (c-n) *  Math.pow(r, n) / factorial(n) );
            }
            
            pk= p0 * ((Math.pow(r,k)) / (Math.pow(c,(k-c)) * factorial(c)));
            L= Lq + c - (p0 * summation);
            W= L / (arrival_rate * (1-pk));
            Wq= Lq / (arrival_rate * (1-pk));
            
            txt_mmck_L.setText(""+ BigDecimal.valueOf(L).setScale(3, RoundingMode.HALF_UP).doubleValue());
            txt_mmck_Lq.setText("" + BigDecimal.valueOf(Lq).setScale(3, RoundingMode.HALF_UP).doubleValue());
            txt_mmck_W.setText("" + BigDecimal.valueOf(W).setScale(3, RoundingMode.HALF_UP).doubleValue());
            txt_mmck_Wq.setText("" + BigDecimal.valueOf(Wq).setScale(3, RoundingMode.HALF_UP).doubleValue());
            
        } catch (NumberFormatException | ScriptException ex) {
            javax.swing.JOptionPane.showMessageDialog(rootPane, "Please enter valid input!", "WARNING!", HEIGHT);
        }
    }//GEN-LAST:event_btn_mmck_calculateMouseClicked

    private void txt_initialCustomersKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_initialCustomersKeyReleased
        String input= txt_initialCustomers.getText();
        verify_input(input,txt_initialCustomers);
    }//GEN-LAST:event_txt_initialCustomersKeyReleased

    private void txt_customerNumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_customerNumberKeyReleased
        String input= txt_customerNumber.getText();
        verify_input(input,txt_customerNumber);
    }//GEN-LAST:event_txt_customerNumberKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QueueFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QueueFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QueueFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QueueFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QueueFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Wq;
    private javax.swing.JButton btn_calculate;
    private javax.swing.JButton btn_graph;
    private javax.swing.JButton btn_mm1_calculate;
    private javax.swing.JButton btn_mm1k_calculate;
    private javax.swing.JButton btn_mmc_calculate;
    private javax.swing.JButton btn_mmck_calculate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lbl_arrival;
    private javax.swing.JLabel lbl_capacity;
    private javax.swing.JLabel lbl_customerNumber;
    private javax.swing.JLabel lbl_initialCustomers;
    private javax.swing.JLabel lbl_mm1_L;
    private javax.swing.JLabel lbl_mm1_Lq;
    private javax.swing.JLabel lbl_mm1_W;
    private javax.swing.JLabel lbl_mm1_Wq;
    private javax.swing.JLabel lbl_mm1_arrival;
    private javax.swing.JLabel lbl_mm1_service;
    private javax.swing.JLabel lbl_mm1k_L;
    private javax.swing.JLabel lbl_mm1k_Lq;
    private javax.swing.JLabel lbl_mm1k_W;
    private javax.swing.JLabel lbl_mm1k_arrival;
    private javax.swing.JLabel lbl_mm1k_capacity;
    private javax.swing.JLabel lbl_mm1k_service;
    private javax.swing.JLabel lbl_mmc_L;
    private javax.swing.JLabel lbl_mmc_Lq;
    private javax.swing.JLabel lbl_mmc_W;
    private javax.swing.JLabel lbl_mmc_Wq;
    private javax.swing.JLabel lbl_mmc_arrival;
    private javax.swing.JLabel lbl_mmc_servers;
    private javax.swing.JLabel lbl_mmc_service;
    private javax.swing.JLabel lbl_mmck_L;
    private javax.swing.JLabel lbl_mmck_Lq;
    private javax.swing.JLabel lbl_mmck_W;
    private javax.swing.JLabel lbl_mmck_Wq;
    private javax.swing.JLabel lbl_mmck_arrival;
    private javax.swing.JLabel lbl_mmck_capacity;
    private javax.swing.JLabel lbl_mmck_servers;
    private javax.swing.JLabel lbl_mmck_service;
    private javax.swing.JLabel lbl_pplAtTime;
    private javax.swing.JLabel lbl_qWaitTime;
    private javax.swing.JLabel lbl_qWaitTime_M;
    private javax.swing.JLabel lbl_service;
    private javax.swing.JLabel lbl_time;
    private javax.swing.JPanel panel_DD1K;
    private javax.swing.JPanel panel_MM1;
    private javax.swing.JPanel panel_MM1K;
    private javax.swing.JPanel panel_MMC;
    private javax.swing.JPanel panel_MMCK;
    private javax.swing.JTabbedPane queue_Switch;
    private javax.swing.JTextField txt_arrival;
    private javax.swing.JTextField txt_balkTime;
    private javax.swing.JTextField txt_capacity;
    private javax.swing.JTextField txt_customerNumber;
    private javax.swing.JTextField txt_initialCustomers;
    private javax.swing.JTextField txt_mm1_L;
    private javax.swing.JTextField txt_mm1_Lq;
    private javax.swing.JTextField txt_mm1_W;
    private javax.swing.JTextField txt_mm1_Wq;
    private javax.swing.JTextField txt_mm1_arrival;
    private javax.swing.JTextField txt_mm1_service;
    private javax.swing.JTextField txt_mm1k_L;
    private javax.swing.JTextField txt_mm1k_Lq;
    private javax.swing.JTextField txt_mm1k_W;
    private javax.swing.JTextField txt_mm1k_Wq;
    private javax.swing.JTextField txt_mm1k_arrival;
    private javax.swing.JTextField txt_mm1k_capacity;
    private javax.swing.JTextField txt_mm1k_service;
    private javax.swing.JTextField txt_mmc_L;
    private javax.swing.JTextField txt_mmc_Lq;
    private javax.swing.JTextField txt_mmc_W;
    private javax.swing.JTextField txt_mmc_Wq;
    private javax.swing.JTextField txt_mmc_arrival;
    private javax.swing.JTextField txt_mmc_servers;
    private javax.swing.JTextField txt_mmc_service;
    private javax.swing.JTextField txt_mmck_L;
    private javax.swing.JTextField txt_mmck_Lq;
    private javax.swing.JTextField txt_mmck_W;
    private javax.swing.JTextField txt_mmck_Wq;
    private javax.swing.JTextField txt_mmck_arrival;
    private javax.swing.JTextField txt_mmck_capacity;
    private javax.swing.JTextField txt_mmck_servers;
    private javax.swing.JTextField txt_mmck_service;
    private javax.swing.JTextField txt_pplAtTime;
    private javax.swing.JTextField txt_qWaitTime;
    private javax.swing.JTextField txt_qWaitTime_M;
    private javax.swing.JTextField txt_service;
    private javax.swing.JTextField txt_time;
    // End of variables declaration//GEN-END:variables
    
    private static void verify_input(String input, javax.swing.JTextField txt_field){
    for(int i=0; i<input.length(); i++){
            if(
                    input.charAt(i) >= '0' && 
                    input.charAt(i) <= '9' || 
                    input.charAt(i) == '.' || 
                    input.charAt(i) == '/' || 
                    input.charAt(i) == '*' ||
                    input.charAt(i) == '(' ||
                    input.charAt(i) == ')' ||
                    input.charAt(i) == '+' ||
                    input.charAt(i) == '-'){
            }
            else{
            txt_field.setText(input.replace(input.charAt(i), Character.MIN_VALUE));
            }
        
        }
    }
    private int getPPLCountAtTime(int time) throws ScriptException{
        ScriptEngineManager arithmetic = new ScriptEngineManager();
        ScriptEngine arithmetic_engine = arithmetic.getEngineByName("JavaScript");
        double arrival_time= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_arrival.getText())));
            double service_time= Double.valueOf(String.valueOf(arithmetic_engine.eval(txt_service.getText())));
            double arrival_rate= (double) 1/arrival_time;
            double service_rate= (double) 1/service_time;
            int pplAtTime=0;
           // int qWaitTime;
            int first_balk_time=0;
            int capacity= Integer.valueOf(String.valueOf(arithmetic_engine.eval(txt_capacity.getText())));
            int M= Integer.valueOf(String.valueOf(arithmetic_engine.eval(txt_initialCustomers.getText())));
          //  int N= Integer.valueOf(String.valueOf(arithmetic_engine.eval(txt_customerNumber.getText())));
          //  int qWaitTime_M;
           double general_balk_time= (-(service_rate / arrival_rate) + capacity) / (arrival_rate - service_rate);
        
          // Case 1: (System is unstable)
          if(arrival_time < service_time){
            
            general_balk_time=Math.round(general_balk_time);
            
            while(true){
                if( Math.floor(arrival_rate * general_balk_time) - 
                        Math.floor((BigDecimal.valueOf((service_rate * general_balk_time) - 
                                (service_rate / arrival_rate)).setScale(6, RoundingMode.HALF_UP)).doubleValue())  == capacity){
                    general_balk_time-=arrival_time;
                    continue;
                }
                else{
                    general_balk_time+=arrival_time;
                }
                break;
            }
          }
            first_balk_time= (int) general_balk_time;
            
            System.out.println(first_balk_time);
          if(arrival_time < service_time){
            if(time < arrival_time){
                return 0;
            }
            else if(time >= arrival_time){
                pplAtTime=  ( (int)(arrival_rate * time) - (int)(service_rate * time - service_rate / arrival_rate));
                return pplAtTime;
            }
            else if (time > first_balk_time){
                if ((time - (.5 * (arrival_time)) - first_balk_time) % (arrival_time) == 0) {
                    pplAtTime = capacity - 2;
                } else {
                    pplAtTime = capacity - 1;
                }
                return pplAtTime;
            }
            
          }
          // Case 2: (System is stable)
          else if(arrival_time > service_time){
              if(M > 0){
                        pplAtTime=(int) ( M + Math.floor(arrival_rate * time) - Math.floor(service_rate * time) );
                        return pplAtTime;
                       }
              
                        }
                
          
            
            
        return -1;
    }
    private int factorial(int n){
      if (n <= 1){
          return 1;
      }
      else{
        return n*factorial(n-1);
      }
      }
    
    
    }


